!(function (t, e) { typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = e() : typeof define === 'function' && define.amd ? define(e) : (t = t || self).GLightbox = e(); }(this, () => {
  function t(e) { return (t = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (t) { return typeof t; } : function (t) { return t && typeof Symbol === 'function' && t.constructor === Symbol && t !== Symbol.prototype ? 'symbol' : typeof t; })(e); } function e(t, e) { if (!(t instanceof e)) throw new TypeError('Cannot call a class as a function'); } function i(t, e) { for (let i = 0; i < e.length; i++) { const n = e[i]; n.enumerable = n.enumerable || !1, n.configurable = !0, 'value' in n && (n.writable = !0), Object.defineProperty(t, n.key, n); } } function n(t, e, n) { return e && i(t.prototype, e), n && i(t, n), t; } function s(t) { return (function (t) { if (Array.isArray(t)) { for (var e = 0, i = new Array(t.length); e < t.length; e++)i[e] = t[e]; return i; } }(t)) || (function (t) { if (Symbol.iterator in Object(t) || Object.prototype.toString.call(t) === '[object Arguments]') return Array.from(t); }(t)) || (function () { throw new TypeError('Invalid attempt to spread non-iterable instance'); }()); } function o(t) { return Math.sqrt(t.x * t.x + t.y * t.y); } function l(t, e) { let i = (function (t, e) { const i = o(t) * o(e); if (i === 0) return 0; let n = (function (t, e) { return t.x * e.x + t.y * e.y; }(t, e)) / i; return n > 1 && (n = 1), Math.acos(n); }(t, e)); return (function (t, e) { return t.x * e.y - e.x * t.y; }(t, e)) > 0 && (i *= -1), 180 * i / Math.PI; } const r = (function () { function t(i) { e(this, t), this.handlers = [], this.el = i; } return n(t, [{ key: 'add', value(t) { this.handlers.push(t); } }, { key: 'del', value(t) { t || (this.handlers = []); for (let e = this.handlers.length; e >= 0; e--) this.handlers[e] === t && this.handlers.splice(e, 1); } }, { key: 'dispatch', value() { for (let t = 0, e = this.handlers.length; t < e; t++) { const i = this.handlers[t]; typeof i === 'function' && i.apply(this.el, arguments); } } }]), t; }()); function a(t, e) { const i = new r(t); return i.add(e), i; } const c = (function () {
    function t(i, n) { e(this, t), this.element = typeof i === 'string' ? document.querySelector(i) : i, this.start = this.start.bind(this), this.move = this.move.bind(this), this.end = this.end.bind(this), this.cancel = this.cancel.bind(this), this.element.addEventListener('touchstart', this.start, !1), this.element.addEventListener('touchmove', this.move, !1), this.element.addEventListener('touchend', this.end, !1), this.element.addEventListener('touchcancel', this.cancel, !1), this.preV = { x: null, y: null }, this.pinchStartLen = null, this.zoom = 1, this.isDoubleTap = !1; const s = function () { }; this.rotate = a(this.element, n.rotate || s), this.touchStart = a(this.element, n.touchStart || s), this.multipointStart = a(this.element, n.multipointStart || s), this.multipointEnd = a(this.element, n.multipointEnd || s), this.pinch = a(this.element, n.pinch || s), this.swipe = a(this.element, n.swipe || s), this.tap = a(this.element, n.tap || s), this.doubleTap = a(this.element, n.doubleTap || s), this.longTap = a(this.element, n.longTap || s), this.singleTap = a(this.element, n.singleTap || s), this.pressMove = a(this.element, n.pressMove || s), this.twoFingerPressMove = a(this.element, n.twoFingerPressMove || s), this.touchMove = a(this.element, n.touchMove || s), this.touchEnd = a(this.element, n.touchEnd || s), this.touchCancel = a(this.element, n.touchCancel || s), this._cancelAllHandler = this.cancelAll.bind(this), window.addEventListener('scroll', this._cancelAllHandler), this.delta = null, this.last = null, this.now = null, this.tapTimeout = null, this.singleTapTimeout = null, this.longTapTimeout = null, this.swipeTimeout = null, this.x1 = this.x2 = this.y1 = this.y2 = null, this.preTapPosition = { x: null, y: null }; } return n(t, [{ key: 'start', value(t) { if (t.touches) { this.now = Date.now(), this.x1 = t.touches[0].pageX, this.y1 = t.touches[0].pageY, this.delta = this.now - (this.last || this.now), this.touchStart.dispatch(t, this.element), this.preTapPosition.x !== null && (this.isDoubleTap = this.delta > 0 && this.delta <= 250 && Math.abs(this.preTapPosition.x - this.x1) < 30 && Math.abs(this.preTapPosition.y - this.y1) < 30, this.isDoubleTap && clearTimeout(this.singleTapTimeout)), this.preTapPosition.x = this.x1, this.preTapPosition.y = this.y1, this.last = this.now; const e = this.preV; if (t.touches.length > 1) { this._cancelLongTap(), this._cancelSingleTap(); const i = { x: t.touches[1].pageX - this.x1, y: t.touches[1].pageY - this.y1 }; e.x = i.x, e.y = i.y, this.pinchStartLen = o(e), this.multipointStart.dispatch(t, this.element); } this._preventTap = !1, this.longTapTimeout = setTimeout(() => { this.longTap.dispatch(t, this.element), this._preventTap = !0; }, 750); } } }, {
      key: 'move',
      value(t) {
        if (t.touches) {
          const e = this.preV; const i = t.touches.length; const n = t.touches[0].pageX; const
            s = t.touches[0].pageY; if (this.isDoubleTap = !1, i > 1) {
            const r = t.touches[1].pageX; const a = t.touches[1].pageY; const
              c = { x: t.touches[1].pageX - n, y: t.touches[1].pageY - s }; e.x !== null && (this.pinchStartLen > 0 && (t.zoom = o(c) / this.pinchStartLen, this.pinch.dispatch(t, this.element)), t.angle = l(c, e), this.rotate.dispatch(t, this.element)), e.x = c.x, e.y = c.y, this.x2 !== null && this.sx2 !== null ? (t.deltaX = (n - this.x2 + r - this.sx2) / 2, t.deltaY = (s - this.y2 + a - this.sy2) / 2) : (t.deltaX = 0, t.deltaY = 0), this.twoFingerPressMove.dispatch(t, this.element), this.sx2 = r, this.sy2 = a;
          } else {
            if (this.x2 !== null) {
              t.deltaX = n - this.x2, t.deltaY = s - this.y2; const h = Math.abs(this.x1 - this.x2); const
                u = Math.abs(this.y1 - this.y2); (h > 10 || u > 10) && (this._preventTap = !0);
            } else t.deltaX = 0, t.deltaY = 0; this.pressMove.dispatch(t, this.element);
          } this.touchMove.dispatch(t, this.element), this._cancelLongTap(), this.x2 = n, this.y2 = s, i > 1 && t.preventDefault();
        }
      },
    }, { key: 'end', value(t) { if (t.changedTouches) { this._cancelLongTap(); const e = this; t.touches.length < 2 && (this.multipointEnd.dispatch(t, this.element), this.sx2 = this.sy2 = null), this.x2 && Math.abs(this.x1 - this.x2) > 30 || this.y2 && Math.abs(this.y1 - this.y2) > 30 ? (t.direction = this._swipeDirection(this.x1, this.x2, this.y1, this.y2), this.swipeTimeout = setTimeout(() => { e.swipe.dispatch(t, e.element); }, 0)) : (this.tapTimeout = setTimeout(() => { e._preventTap || e.tap.dispatch(t, e.element), e.isDoubleTap && (e.doubleTap.dispatch(t, e.element), e.isDoubleTap = !1); }, 0), e.isDoubleTap || (e.singleTapTimeout = setTimeout(() => { e.singleTap.dispatch(t, e.element); }, 250))), this.touchEnd.dispatch(t, this.element), this.preV.x = 0, this.preV.y = 0, this.zoom = 1, this.pinchStartLen = null, this.x1 = this.x2 = this.y1 = this.y2 = null; } } }, { key: 'cancelAll', value() { this._preventTap = !0, clearTimeout(this.singleTapTimeout), clearTimeout(this.tapTimeout), clearTimeout(this.longTapTimeout), clearTimeout(this.swipeTimeout); } }, { key: 'cancel', value(t) { this.cancelAll(), this.touchCancel.dispatch(t, this.element); } }, { key: '_cancelLongTap', value() { clearTimeout(this.longTapTimeout); } }, { key: '_cancelSingleTap', value() { clearTimeout(this.singleTapTimeout); } }, { key: '_swipeDirection', value(t, e, i, n) { return Math.abs(t - e) >= Math.abs(i - n) ? t - e > 0 ? 'Left' : 'Right' : i - n > 0 ? 'Up' : 'Down'; } }, { key: 'on', value(t, e) { this[t] && this[t].add(e); } }, { key: 'off', value(t, e) { this[t] && this[t].del(e); } }, { key: 'destroy', value() { return this.singleTapTimeout && clearTimeout(this.singleTapTimeout), this.tapTimeout && clearTimeout(this.tapTimeout), this.longTapTimeout && clearTimeout(this.longTapTimeout), this.swipeTimeout && clearTimeout(this.swipeTimeout), this.element.removeEventListener('touchstart', this.start), this.element.removeEventListener('touchmove', this.move), this.element.removeEventListener('touchend', this.end), this.element.removeEventListener('touchcancel', this.cancel), this.rotate.del(), this.touchStart.del(), this.multipointStart.del(), this.multipointEnd.del(), this.pinch.del(), this.swipe.del(), this.tap.del(), this.doubleTap.del(), this.longTap.del(), this.singleTap.del(), this.pressMove.del(), this.twoFingerPressMove.del(), this.touchMove.del(), this.touchEnd.del(), this.touchCancel.del(), this.preV = this.pinchStartLen = this.zoom = this.isDoubleTap = this.delta = this.last = this.now = this.tapTimeout = this.singleTapTimeout = this.longTapTimeout = this.swipeTimeout = this.x1 = this.x2 = this.y1 = this.y2 = this.preTapPosition = this.rotate = this.touchStart = this.multipointStart = this.multipointEnd = this.pinch = this.swipe = this.tap = this.doubleTap = this.longTap = this.singleTap = this.pressMove = this.touchMove = this.touchEnd = this.touchCancel = this.twoFingerPressMove = null, window.removeEventListener('scroll', this._cancelAllHandler), null; } }]), t;
  }());
  const h = (function () {
    function t(i, n) {
      const s = this; const
        o = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null; if (e(this, t), this.img = i, this.slide = n, this.onclose = o, this.img.setZoomEvents) return !1; this.active = !1, this.zoomedIn = !1, this.dragging = !1, this.currentX = null, this.currentY = null, this.initialX = null, this.initialY = null, this.xOffset = 0, this.yOffset = 0, this.img.addEventListener('mousedown', (t) => s.dragStart(t), !1), this.img.addEventListener('mouseup', (t) => s.dragEnd(t), !1), this.img.addEventListener('mousemove', (t) => s.drag(t), !1), this.img.addEventListener('click', (t) => { if (!s.zoomedIn) return s.zoomIn(); s.zoomedIn && !s.dragging && s.zoomOut(); }, !1), this.img.setZoomEvents = !0;
    } return n(t, [{ key: 'zoomIn', value() { const t = this.widowWidth(); if (!(this.zoomedIn || t <= 768)) { const e = this.img; if (e.setAttribute('data-style', e.getAttribute('style')), e.style.maxWidth = `${e.naturalWidth}px`, e.style.maxHeight = `${e.naturalHeight}px`, e.naturalWidth > t) { const i = t / 2 - e.naturalWidth / 2; this.setTranslate(this.img.parentNode, i, 0); } this.slide.classList.add('zoomed'), this.zoomedIn = !0; } } }, { key: 'zoomOut', value() { this.img.parentNode.setAttribute('style', ''), this.img.setAttribute('style', this.img.getAttribute('data-style')), this.slide.classList.remove('zoomed'), this.zoomedIn = !1, this.currentX = null, this.currentY = null, this.initialX = null, this.initialY = null, this.xOffset = 0, this.yOffset = 0, this.onclose && typeof this.onclose === 'function' && this.onclose(); } }, { key: 'dragStart', value(t) { t.preventDefault(), this.zoomedIn ? (t.type === 'touchstart' ? (this.initialX = t.touches[0].clientX - this.xOffset, this.initialY = t.touches[0].clientY - this.yOffset) : (this.initialX = t.clientX - this.xOffset, this.initialY = t.clientY - this.yOffset), t.target === this.img && (this.active = !0, this.img.classList.add('dragging'))) : this.active = !1; } }, { key: 'dragEnd', value(t) { const e = this; t.preventDefault(), this.initialX = this.currentX, this.initialY = this.currentY, this.active = !1, setTimeout(() => { e.dragging = !1, e.img.isDragging = !1, e.img.classList.remove('dragging'); }, 100); } }, { key: 'drag', value(t) { this.active && (t.preventDefault(), t.type === 'touchmove' ? (this.currentX = t.touches[0].clientX - this.initialX, this.currentY = t.touches[0].clientY - this.initialY) : (this.currentX = t.clientX - this.initialX, this.currentY = t.clientY - this.initialY), this.xOffset = this.currentX, this.yOffset = this.currentY, this.img.isDragging = !0, this.dragging = !0, this.setTranslate(this.img, this.currentX, this.currentY)); } }, {
      key: 'onMove',
      value(t) {
        if (this.zoomedIn) {
          const e = t.clientX - this.img.naturalWidth / 2; const
            i = t.clientY - this.img.naturalHeight / 2; this.setTranslate(this.img, e, i);
        }
      },
    }, { key: 'setTranslate', value(t, e, i) { t.style.transform = `translate3d(${e}px, ${i}px, 0)`; } }, { key: 'widowWidth', value() { return window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth; } }]), t;
  }());
  const u = navigator.userAgent.match(/(iPad)|(iPhone)|(iPod)|(Android)|(PlayBook)|(BB10)|(BlackBerry)|(Opera Mini)|(IEMobile)|(webOS)|(MeeGo)/i);
  const d = u !== null || void 0 !== document.createTouch || 'ontouchstart' in window || 'onmsgesturechange' in window || navigator.msMaxTouchPoints;
  const g = document.getElementsByTagName('html')[0];
  const p = (function () {
    let t; const e = document.createElement('fakeelement'); const
      i = {
        transition: 'transitionend', OTransition: 'oTransitionEnd', MozTransition: 'transitionend', WebkitTransition: 'webkitTransitionEnd',
      }; for (t in i) if (void 0 !== e.style[t]) return i[t];
  }());
  const v = (function () {
    let t; const e = document.createElement('fakeelement'); const
      i = {
        animation: 'animationend', OAnimation: 'oAnimationEnd', MozAnimation: 'animationend', WebkitAnimation: 'webkitAnimationEnd',
      }; for (t in i) if (void 0 !== e.style[t]) return i[t];
  }());
  const f = Date.now();
  const m = {};
  const y = {
    selector: 'glightbox',
    elements: null,
    skin: 'clean',
    closeButton: !0,
    startAt: null,
    autoplayVideos: !0,
    descPosition: 'bottom',
    width: 900,
    height: 506,
    videosWidth: 960,
    beforeSlideChange: null,
    afterSlideChange: null,
    beforeSlideLoad: null,
    afterSlideLoad: null,
    onOpen: null,
    onClose: null,
    loopAtEnd: !1,
    touchNavigation: !0,
    keyboardNavigation: !0,
    closeOnOutsideClick: !0,
    plyr: {
      css: 'https://cdn.plyr.io/3.5.6/plyr.css',
      js: 'https://cdn.plyr.io/3.5.6/plyr.js',
      ratio: '16:9',
      config: {
        youtube: {
          noCookie: !0, rel: 0, showinfo: 0, iv_load_policy: 3,
        },
        vimeo: {
          byline: !1, portrait: !1, title: !1, transparent: !1,
        },
      },
    },
    openEffect: 'zoomIn',
    closeEffect: 'zoomOut',
    slideEffect: 'slide',
    moreText: 'Подробнее',
    moreLength: 60,
    lightboxHtml: '',
    cssEfects: {
      fade: { in: 'fadeIn', out: 'fadeOut' }, zoom: { in: 'zoomIn', out: 'zoomOut' }, slide: { in: 'slideInRight', out: 'slideOutLeft' }, slide_back: { in: 'slideInLeft', out: 'slideOutRight' },
    },
    svg: { close: '<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 512 512" xml:space="preserve"><g><g><path d="M505.943,6.058c-8.077-8.077-21.172-8.077-29.249,0L6.058,476.693c-8.077,8.077-8.077,21.172,0,29.249C10.096,509.982,15.39,512,20.683,512c5.293,0,10.586-2.019,14.625-6.059L505.943,35.306C514.019,27.23,514.019,14.135,505.943,6.058z"/></g></g><g><g><path d="M505.942,476.694L35.306,6.059c-8.076-8.077-21.172-8.077-29.248,0c-8.077,8.076-8.077,21.171,0,29.248l470.636,470.636c4.038,4.039,9.332,6.058,14.625,6.058c5.293,0,10.587-2.019,14.624-6.057C514.018,497.866,514.018,484.771,505.942,476.694z"/></g></g></svg>', next: '<svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 477.175 477.175" xml:space="preserve"> <g><path d="M360.731,229.075l-225.1-225.1c-5.3-5.3-13.8-5.3-19.1,0s-5.3,13.8,0,19.1l215.5,215.5l-215.5,215.5c-5.3,5.3-5.3,13.8,0,19.1c2.6,2.6,6.1,4,9.5,4c3.4,0,6.9-1.3,9.5-4l225.1-225.1C365.931,242.875,365.931,234.275,360.731,229.075z"/></g></svg>', prev: '<svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 477.175 477.175" xml:space="preserve"><g><path d="M145.188,238.575l215.5-215.5c5.3-5.3,5.3-13.8,0-19.1s-13.8-5.3-19.1,0l-225.1,225.1c-5.3,5.3-5.3,13.8,0,19.1l225.1,225c2.6,2.6,6.1,4,9.5,4s6.9-1.3,9.5-4c5.3-5.3,5.3-13.8,0-19.1L145.188,238.575z"/></g></svg>' },
  }; y.slideHtml = '<div class="gslide">\n    <div class="gslide-inner-content">\n        <div class="ginner-container">\n            <div class="gslide-media">\n            </div>\n            <div class="gslide-description">\n                <div class="gdesc-inner">\n                    <h4 class="gslide-title"></h4>\n                    <div class="gslide-desc"></div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>'; function b() {
    const t = {}; let e = !1; let i = 0; const
      n = arguments.length; Object.prototype.toString.call(arguments[0]) === '[object Boolean]' && (e = arguments[0], i++); for (let s = function (i) { for (const n in i) Object.prototype.hasOwnProperty.call(i, n) && (e && Object.prototype.toString.call(i[n]) === '[object Object]' ? t[n] = b(!0, t[n], i[n]) : t[n] = i[n]); }; i < n; i++) { s(arguments[i]); } return t;
  } y.lightboxHtml = '<div id="glightbox-body" class="glightbox-container">\n    <div class="gloader visible"></div>\n    <div class="goverlay"></div>\n    <div class="gcontainer">\n    <div id="glightbox-slider" class="gslider"></div>\n    <button class="gnext gbtn" tabindex="0">{nextSVG}</button>\n    <button class="gprev gbtn" tabindex="1">{prevSVG}</button>\n    <button class="gclose gbtn" tabindex="2">{closeSVG}</button>\n</div>\n</div>'; var x = {
    isFunction(t) { return typeof t === 'function'; }, isString(t) { return typeof t === 'string'; }, isNode(t) { return !(!t || !t.nodeType || t.nodeType != 1); }, isArray(t) { return Array.isArray(t); }, isArrayLike(t) { return t && t.length && isFinite(t.length); }, isObject(e) { return t(e) === 'object' && e != null && !x.isFunction(e) && !x.isArray(e); }, isNil(t) { return t == null; }, has(t, e) { return t !== null && hasOwnProperty.call(t, e); }, size(t) { if (x.isObject(t)) { if (t.keys) return t.keys().length; let e = 0; for (const i in t) x.has(t, i) && e++; return e; } return t.length; }, isNumber(t) { return !isNaN(parseFloat(t)) && isFinite(t); },
  }; function w(t, e) { if ((x.isNode(t) || t === window || t === document) && (t = [t]), x.isArrayLike(t) || x.isObject(t) || (t = [t]), x.size(t) != 0) if (x.isArrayLike(t) && !x.isObject(t)) for (let i = t.length, n = 0; n < i && !1 !== e.call(t[n], t[n], n, t); n++); else if (x.isObject(t)) for (const s in t) if (x.has(t, s) && !1 === e.call(t[s], t[s], s, t)) break; } function S(t) {
    const e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null; const i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null; const n = t[f] = t[f] || []; const
      s = { all: n, evt: null, found: null }; return e && i && x.size(n) > 0 && w(n, (t, n) => { if (t.eventName == e && t.fn.toString() == i.toString()) return s.found = !0, s.evt = n, !1; }), s;
  } function T(t) {
    const e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}; const i = e.onElement; const n = e.withCallback; const s = e.avoidDuplicate; const o = void 0 === s || s; const l = e.once; const r = void 0 !== l && l; const a = e.useCapture; const c = void 0 !== a && a; const h = arguments.length > 2 ? arguments[2] : void 0; let
      u = i || []; function d(t) { x.isFunction(n) && n.call(h, t, this), r && d.destroy(); } return x.isString(u) && (u = document.querySelectorAll(u)), d.destroy = function () { w(u, (e) => { const i = S(e, t, d); i.found && i.all.splice(i.evt, 1), e.removeEventListener && e.removeEventListener(t, d, c); }); }, w(u, (e) => { const i = S(e, t, d); (e.addEventListener && o && !i.found || !o) && (e.addEventListener(t, d, c), i.all.push({ eventName: t, fn: d })); }), d;
  } function k(t, e) { w(e.split(' '), (e) => t.classList.add(e)); } function E(t, e) { w(e.split(' '), (e) => t.classList.remove(e)); } function A(t, e) { return t.classList.contains(e); } function C(t) {
    const e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : '';
    const i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2]; if (!t || e === '') return !1; if (e == 'none') return x.isFunction(i) && i(), !1; const n = e.split(' '); w(n, (e) => { k(t, `g${e}`); }), T(v, {
      onElement: t, avoidDuplicate: !1, once: !0, withCallback(t, e) { w(n, (t) => { E(e, `g${t}`); }), x.isFunction(i) && i(); },
    });
  } function L(t) {
    const e = document.createDocumentFragment(); const
      i = document.createElement('div'); for (i.innerHTML = t; i.firstChild;)e.appendChild(i.firstChild); return e;
  } function M(t, e) { for (; t !== document.body;) { if (typeof (t = t.parentElement).matches === 'function' ? t.matches(e) : t.msMatchesSelector(e)) return t; } } function O(t) { t.style.display = 'block'; } function z(t) { t.style.display = 'none'; } function q() { return { width: window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth, height: window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight }; } function N(t) { if (A(t.target, 'plyr--html5')) { const e = M(t.target, '.gslide-media'); t.type == 'enterfullscreen' && k(e, 'fullscreen'), t.type == 'exitfullscreen' && E(e, 'fullscreen'); } } const I = function () {
    const t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null; const e = arguments.length > 1 ? arguments[1] : void 0; const
      i = {
        href: '', title: '', type: '', description: '', descPosition: e.descPosition, effect: '', width: '', height: '', node: t,
      }; if (x.isObject(t) && !x.isNode(t)) return b(i, t); let n = '';
    const s = t.getAttribute('data-glightbox');
    const o = t.nodeName.toLowerCase(); if (o === 'a' && (n = t.href), o === 'img' && (n = t.src), i.href = n, w(i, (n, s) => { x.has(e, s) && s !== 'width' && (i[s] = e[s]); const o = t.dataset[s]; x.isNil(o) || (i[s] = o); }), i.type || (i.type = W(n)), x.isNil(s)) { if (o == 'a') { const l = t.title; x.isNil(l) || l === '' || (i.title = l); } if (o == 'img') { const r = t.alt; x.isNil(r) || r === '' || (i.title = r); } const a = t.getAttribute('data-description'); x.isNil(a) || a === '' || (i.description = a); } else {
      let c = []; w(i, (t, e) => { c.push(`;\\s?${e}`); }), c = c.join('\\s?:|'), s.trim() !== '' && w(i, (t, e) => {
        const n = s; const o = new RegExp(`s?${e}s?:s?(.*?)(${c}s?:|$)`); const
          l = n.match(o); if (l && l.length && l[1]) { const r = l[1].trim().replace(/;\s*$/, ''); i[e] = r; }
      });
    } if (i.description && i.description.substring(0, 1) == '.' && document.querySelector(i.description)) i.description = document.querySelector(i.description).innerHTML; else { const h = t.querySelector('.glightbox-desc'); h && (i.description = h.innerHTML); } const u = i.type == 'video' ? e.videosWidth : e.width; const
      d = e.height; return i.width = x.has(i, 'width') && i.width !== '' ? i.width : u, i.height = x.has(i, 'height') && i.height !== '' ? i.height : d, i;
  }; const
    D = function () {
      const t = this; const e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null; const i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}; const
        n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2]; if (A(e, 'loaded')) return !1; x.isFunction(this.settings.beforeSlideLoad) && this.settings.beforeSlideLoad(e, i); const s = i.type; const o = i.descPosition; const l = e.querySelector('.gslide-media'); const r = e.querySelector('.gslide-title'); const a = e.querySelector('.gslide-desc'); const c = e.querySelector('.gdesc-inner'); let
        d = n; if (x.isFunction(this.settings.afterSlideLoad) && (d = function () { x.isFunction(n) && n(), t.settings.afterSlideLoad(e, i); }), i.title == '' && i.description == '' ? c && c.parentNode.parentNode.removeChild(c.parentNode) : (r && i.title !== '' ? r.innerHTML = i.title : r.parentNode.removeChild(r), a && i.description !== '' ? u && this.settings.moreLength > 0 ? (i.smallDescription = G(i.description, this.settings.moreLength, this.settings.moreText), a.innerHTML = i.smallDescription, Z.apply(this, [a, i])) : a.innerHTML = i.description : a.parentNode.removeChild(a), k(l.parentNode, 'desc-'.concat(o)), k(c.parentNode, 'description-'.concat(o))), k(l, 'gslide-'.concat(s)), k(e, 'loaded'), s === 'video') return k(l.parentNode, 'gvideo-container'), l.insertBefore(L('<div class="gvideo-wrapper"></div>'), l.firstChild), void X.apply(this, [e, i, d]); if (s === 'external') {
        const g = Y({
          url: i.href, width: i.width, height: i.height, callback: d,
        }); return l.parentNode.style.maxWidth = ''.concat(i.width, 'px'), void l.appendChild(g);
      } if (s !== 'inline') { if (s === 'image') { const p = new Image(); return p.addEventListener('load', () => { !u && p.naturalWidth > p.offsetWidth && (k(p, 'zoomable'), new h(p, e, (() => { t.resize(e); }))), x.isFunction(d) && d(); }, !1), p.src = i.href, void l.insertBefore(p, l.firstChild); } x.isFunction(d) && d(); } else F.apply(this, [e, i, d]);
    }; function X(t, e, i) {
    const n = this; const s = `gvideo${e.index}`; const
      o = t.querySelector('.gvideo-wrapper'); B(this.settings.plyr.css); const l = e.href; let r = location.protocol.replace(':', ''); let a = ''; let c = ''; let
      h = !1; r == 'file' && (r = 'http'), o.parentNode.style.maxWidth = ''.concat(e.width, 'px'), B(this.settings.plyr.js, 'Plyr', () => {
      if (l.match(/vimeo\.com\/([0-9]*)/)) { const t = /vimeo.*\/(\d+)/i.exec(l); a = 'vimeo', c = t[1]; } if (l.match(/(youtube\.com|youtube-nocookie\.com)\/watch\?v=([a-zA-Z0-9\-_]+)/) || l.match(/youtu\.be\/([a-zA-Z0-9\-_]+)/) || l.match(/(youtube\.com|youtube-nocookie\.com)\/embed\/([a-zA-Z0-9\-_]+)/)) { const r = (function (t) { let e = ''; e = void 0 !== (t = t.replace(/(>|<)/gi, '').split(/(vi\/|v=|\/v\/|youtu\.be\/|\/embed\/)/))[2] ? (e = t[2].split(/[^0-9a-z_\-]/i))[0] : t; return e; }(l)); a = 'youtube', c = r; } if (l.match(/\.(mp4|ogg|webm)$/) !== null) {
        a = 'local'; let u = `<video id="${s}" `; u += 'style="background:#000; max-width: '.concat(e.width, 'px;" '), u += 'preload="metadata" ', u += 'x-webkit-airplay="allow" ', u += 'webkit-playsinline="" ', u += 'controls ', u += 'class="gvideo-local">'; const d = l.toLowerCase().split('.').pop(); const
          g = { mp4: '', ogg: '', webm: '' }; for (const p in g[d] = l, g) if (g.hasOwnProperty(p)) { let v = g[p]; e.hasOwnProperty(p) && (v = e[p]), v !== '' && (u += '<source src="'.concat(v, '" type="video/').concat(p, '">')); } h = L(u += '</video>');
      } const f = h || L('<div id="'.concat(s, '" data-plyr-provider="').concat(a, '" data-plyr-embed-id="').concat(c, '"></div>')); k(o, ''.concat(a, '-video gvideo')), o.appendChild(f), o.setAttribute('data-id', s); const y = x.has(n.settings.plyr, 'config') ? n.settings.plyr.config : {}; const
        b = new Plyr(`#${s}`, y); b.on('ready', (t) => { const e = t.detail.plyr; m[s] = e, x.isFunction(i) && i(); }), b.on('enterfullscreen', N), b.on('exitfullscreen', N);
    });
  } function Y(t) {
    const e = t.url; const i = t.width; const n = t.height; const s = t.allow; const o = t.callback; const l = t.appendTo; const r = document.createElement('iframe'); const
      a = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth; return r.className = 'vimeo-video gvideo', r.src = e, n && (r.style.height = u && a < 767 ? '' : ''.concat(n, 'px')), i && (r.style.width = ''.concat(i, 'px')), s && r.setAttribute('allow', s), r.onload = function () { k(r, 'node-ready'), x.isFunction(o) && o(); }, l && l.appendChild(r), r;
  } function B(t, e, i) {
    if (x.isNil(t)) console.error('Inject videos api error'); else {
      let n; if (x.isFunction(e) && (i = e, e = !1), t.indexOf('.css') !== -1) {
        if ((n = document.querySelectorAll(`link[href="${t}"]`)) && n.length > 0) return void (x.isFunction(i) && i()); const s = document.getElementsByTagName('head')[0]; const o = s.querySelectorAll('link[rel="stylesheet"]'); const
          l = document.createElement('link'); return l.rel = 'stylesheet', l.type = 'text/css', l.href = t, l.media = 'all', o ? s.insertBefore(l, o[0]) : s.appendChild(l), void (x.isFunction(i) && i());
      } if ((n = document.querySelectorAll(`script[src="${t}"]`)) && n.length > 0) { if (x.isFunction(i)) { if (x.isString(e)) return P(() => void 0 !== window[e], () => { i(); }), !1; i(); } } else { const r = document.createElement('script'); r.type = 'text/javascript', r.src = t, r.onload = function () { if (x.isFunction(i)) { if (x.isString(e)) return P(() => void 0 !== window[e], () => { i(); }), !1; i(); } }, document.body.appendChild(r); }
    }
  } function P(t, e, i, n) { if (t()) e(); else { let s; i || (i = 100); var o = setInterval(() => { t() && (clearInterval(o), s && clearTimeout(s), e()); }, i); n && (s = setTimeout(() => { clearInterval(o); }, n)); } } function F(t, e, i) {
    const n = this; const s = t.querySelector('.gslide-media'); const o = e.href.split('#').pop().trim(); const
      l = document.getElementById(o); if (!l) return !1; const r = l.cloneNode(!0); r.style.height = x.isNumber(e.height) ? ''.concat(e.height, 'px') : e.height, r.style.maxWidth = x.isNumber(e.width) ? ''.concat(e.width, 'px') : e.width, k(r, 'ginlined-content'), s.appendChild(r), this.events[`inlineclose${o}`] = T('click', { onElement: s.querySelectorAll('.gtrigger-close'), withCallback(t) { t.preventDefault(), n.close(); } }), x.isFunction(i) && i();
  } var W = function (t) { const e = t; if ((t = t.toLowerCase()).match(/\.(jpeg|jpg|gif|png|apn|webp|svg)$/) !== null) return 'image'; if (t.match(/(youtube\.com|youtube-nocookie\.com)\/watch\?v=([a-zA-Z0-9\-_]+)/) || t.match(/youtu\.be\/([a-zA-Z0-9\-_]+)/) || t.match(/(youtube\.com|youtube-nocookie\.com)\/embed\/([a-zA-Z0-9\-_]+)/)) return 'video'; if (t.match(/vimeo\.com\/([0-9]*)/)) return 'video'; if (t.match(/\.(mp4|ogg|webm)$/) !== null) return 'video'; if (t.indexOf('#') > -1 && e.split('#').pop().trim() !== '') return 'inline'; return t.includes('gajax=true') ? 'ajax' : 'external'; }; function _() { const t = this; if (this.events.hasOwnProperty('keyboard')) return !1; this.events.keyboard = T('keydown', { onElement: window, withCallback(e, i) { const n = (e = e || window.event).keyCode; if (n == 9) { e.preventDefault(); const o = document.querySelectorAll('.gbtn'); if (!o || o.length <= 0) return; const l = s(o).filter((t) => A(t, 'focused')); if (!l.length) { const r = document.querySelector('.gbtn[tabindex="0"]'); return void (r && (r.focus(), k(r, 'focused'))); } o.forEach((t) => E(t, 'focused')); let a = l[0].getAttribute('tabindex'); a = a || '0'; let c = parseInt(a) + 1; c > o.length - 1 && (c = '0'); const h = document.querySelector('.gbtn[tabindex="'.concat(c, '"]')); h && (h.focus(), k(h, 'focused')); } n == 39 && t.nextSlide(), n == 37 && t.prevSlide(), n == 27 && t.close(); } }); } function j() {
    const t = this; if (this.events.hasOwnProperty('touch')) return !1; let e; let i; let n; const s = q(); const o = s.width; const l = s.height; let r = !1; let a = null; let h = null; let u = null; let d = !1; let g = 1; let p = 1; let v = !1; let f = !1; let m = null; let y = null; let b = null; let x = null; let w = 0; let S = 0; let T = !1; let C = !1; const L = {}; let M = {}; let O = 0; let z = 0; const N = this; const I = document.getElementById('glightbox-slider'); const D = document.querySelector('.goverlay'); const
      X = new c(I, {
        touchStart(t) { if (A(t.targetTouches[0].target, 'ginner-container')) return r = !1, !1; r = !0, M = t.targetTouches[0], L.pageX = t.targetTouches[0].pageX, L.pageY = t.targetTouches[0].pageY, O = t.targetTouches[0].clientX, z = t.targetTouches[0].clientY, a = N.activeSlide, h = a.querySelector('.gslide-media'), n = a.querySelector('.gslide-inline'), u = null, A(h, 'gslide-image') && (u = h.querySelector('img')), E(D, 'greset'); },
        touchMove(t) {
          if (r && (M = t.targetTouches[0], !v && !f)) {
            if (n && n.offsetHeight > l) { const s = L.pageX - M.pageX; if (Math.abs(s) <= 13) return !1; } d = !0; let a; const c = t.targetTouches[0].clientX; const g = t.targetTouches[0].clientY; const p = O - c; const
              m = z - g; if (Math.abs(p) > Math.abs(m) ? (T = !1, C = !0) : (C = !1, T = !0), e = M.pageX - L.pageX, w = 100 * e / o, i = M.pageY - L.pageY, S = 100 * i / l, T && u && (a = 1 - Math.abs(i) / l, D.style.opacity = a), C && (a = 1 - Math.abs(e) / o, h.style.opacity = a), !u) return H(h, 'translate3d('.concat(w, '%, 0, 0)')); H(h, 'translate3d('.concat(w, '%, ').concat(S, '%, 0)'));
          }
        },
        touchEnd() {
          if (r) {
            if (d = !1, f || v) return b = m, void (x = y); const e = Math.abs(parseInt(S)); const
              i = Math.abs(parseInt(w)); if (!(e > 35 && u)) return e < 35 && i < 25 ? (k(D, 'greset'), D.style.opacity = 1, V(h)) : void 0; t.close();
          }
        },
        multipointEnd() { setTimeout(() => { v = !1; }, 50); },
        multipointStart() { v = !0, g = p || 1; },
        pinch(t) { if (!u || d) return !1; v = !0, u.scaleX = u.scaleY = g * t.zoom; let e = g * t.zoom; if (f = !0, e <= 1) return f = !1, e = 1, x = null, b = null, m = null, y = null, void u.setAttribute('style', ''); e > 4.5 && (e = 4.5), u.style.transform = 'scale3d('.concat(e, ', ').concat(e, ', 1)'), p = e; },
        pressMove(t) {
          if (f && !v) {
            let e = M.pageX - L.pageX; let
              i = M.pageY - L.pageY; b && (e += b), x && (i += x), m = e, y = i; let n = 'translate3d('.concat(e, 'px, ').concat(i, 'px, 0)'); p && (n += ' scale3d('.concat(p, ', ').concat(p, ', 1)')), H(u, n);
          }
        },
        swipe(e) { if (!f) if (v) v = !1; else { if (e.direction == 'Left') { if (t.index == t.elements.length - 1) return V(h); t.nextSlide(); } if (e.direction == 'Right') { if (t.index == 0) return V(h); t.prevSlide(); } } },
      }); this.events.touch = X;
  } function H(t) { const e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : ''; if (e == '') return t.style.webkitTransform = '', t.style.MozTransform = '', t.style.msTransform = '', t.style.OTransform = '', t.style.transform = '', !1; t.style.webkitTransform = e, t.style.MozTransform = e, t.style.msTransform = e, t.style.OTransform = e, t.style.transform = e; } function V(t) {
    const e = A(t, 'gslide-media') ? t : t.querySelector('.gslide-media'); const
      i = t.querySelector('.gslide-description'); k(e, 'greset'), H(e, 'translate3d(0, 0, 0)'); T(p, { onElement: e, once: !0, withCallback(t, i) { E(e, 'greset'); } }); e.style.opacity = '', i && (i.style.opacity = '');
  } function G(t) {
    const e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 50; const i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2]; const
      n = i; if ((t = t.trim()).length <= e) return t; const s = t.substr(0, e - 1); return n ? `${s}... <a href="#" class="desc-more">${i}</a>` : s;
  } function Z(t, e) {
    const i = t.querySelector('.desc-more'); if (!i) return !1; T('click', {
      onElement: i,
      withCallback(t, i) {
        t.preventDefault(); const n = document.body; const
          s = M(i, '.gslide-desc'); if (!s) return !1; s.innerHTML = e.description, k(n, 'gdesc-open'); var o = T('click', { onElement: [n, M(s, '.gslide-description')], withCallback(t, i) { t.target.nodeName.toLowerCase() !== 'a' && (E(n, 'gdesc-open'), k(n, 'gdesc-closed'), s.innerHTML = e.smallDescription, Z(s, e), setTimeout(() => { E(n, 'gdesc-closed'); }, 400), o.destroy()); } });
      },
    });
  } const R = (function () {
    function t(i) { e(this, t), this.settings = b(y, i || {}), this.effectsClasses = this.getAnimationClasses(), this.slidesData = {}; } return n(t, [{ key: 'init', value() { const t = this; this.baseEvents = T('click', { onElement: '.'.concat(this.settings.selector), withCallback(e, i) { e.preventDefault(), t.open(i); } }); } }, { key: 'open', value() { const t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null; if (this.elements = this.getElements(t), this.elements.length == 0) return !1; this.activeSlide = null, this.prevActiveSlideIndex = null, this.prevActiveSlide = null; let e = this.settings.startAt; t && x.isNil(e) && (e = this.elements.indexOf(t)) < 0 && (e = 0), x.isNil(e) && (e = 0), this.build(), C(this.overlay, this.settings.openEffect == 'none' ? 'none' : this.settings.cssEfects.fade.in); const i = document.body; if (i.style.width = ''.concat(i.offsetWidth, 'px'), k(i, 'glightbox-open'), k(g, 'glightbox-open'), u && (k(document.body, 'glightbox-mobile'), this.settings.slideEffect = 'slide'), this.showSlide(e, !0), this.elements.length == 1 ? (z(this.prevButton), z(this.nextButton)) : (O(this.prevButton), O(this.nextButton)), this.lightboxOpen = !0, x.isFunction(this.settings.onOpen) && this.settings.onOpen(), u && d && this.settings.touchNavigation) return j.apply(this), !1; this.settings.keyboardNavigation && _.apply(this); } }, {
      key: 'showSlide',
      value() {
        const t = this; const e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0; const
          i = arguments.length > 1 && void 0 !== arguments[1] && arguments[1]; O(this.loader), this.index = parseInt(e); const n = this.slidesContainer.querySelector('.current'); n && E(n, 'current'), this.slideAnimateOut(); const s = this.slidesContainer.querySelectorAll('.gslide')[e]; if (A(s, 'loaded')) this.slideAnimateIn(s, i), z(this.loader); else { O(this.loader); const o = I(this.elements[e], this.settings); o.index = e, this.slidesData[e] = o, D.apply(this, [s, o, function () { z(t.loader), t.resize(), t.slideAnimateIn(s, i); }]); } this.slideDescription = s.querySelector('.gslide-description'), this.slideDescriptionContained = this.slideDescription && A(this.slideDescription.parentNode, 'gslide-media'), this.preloadSlide(e + 1), this.preloadSlide(e - 1), E(this.nextButton, 'disabled'), E(this.prevButton, 'disabled'), e === 0 ? k(this.prevButton, 'disabled') : e === this.elements.length - 1 && !0 !== this.settings.loopAtEnd && k(this.nextButton, 'disabled'), this.activeSlide = s;
      },
    }, { key: 'preloadSlide', value(t) { const e = this; if (t < 0 || t > this.elements.length) return !1; if (x.isNil(this.elements[t])) return !1; const i = this.slidesContainer.querySelectorAll('.gslide')[t]; if (A(i, 'loaded')) return !1; const n = I(this.elements[t], this.settings); n.index = t, this.slidesData[t] = n; const s = n.sourcetype; s == 'video' || s == 'external' ? setTimeout(() => { D.apply(e, [i, n]); }, 200) : D.apply(this, [i, n]); } }, { key: 'prevSlide', value() { const t = this.index - 1; if (t < 0) return !1; this.goToSlide(t); } }, { key: 'nextSlide', value() { const t = this.index + 1; if (t > this.elements.length) return !1; this.goToSlide(t); } }, { key: 'goToSlide', value() { let t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0]; t > -1 && (this.prevActiveSlide = this.activeSlide, this.prevActiveSlideIndex = this.index, t < this.elements.length ? this.showSlide(t) : !0 === this.settings.loopAtEnd && (t = 0, this.showSlide(t))); } }, {
      key: 'slideAnimateIn',
      value(t, e) {
        const i = this; const n = t.querySelector('.gslide-media'); const s = t.querySelector('.gslide-description'); const o = { index: this.prevActiveSlideIndex, slide: this.prevActiveSlide }; const
          l = { index: this.index, slide: this.activeSlide }; if (n.offsetWidth > 0 && s && (z(s), s.style.display = ''), E(t, this.effectsClasses), e) C(t, this.settings.openEffect, () => { !u && i.settings.autoplayVideos && i.playSlideVideo(t), x.isFunction(i.settings.afterSlideChange) && i.settings.afterSlideChange.apply(i, [o, l]); }); else {
          const r = this.settings.slideEffect; let
            a = r !== 'none' ? this.settings.cssEfects[r].in : r; this.prevActiveSlideIndex > this.index && this.settings.slideEffect == 'slide' && (a = this.settings.cssEfects.slide_back.in), C(t, a, () => { !u && i.settings.autoplayVideos && i.playSlideVideo(t), x.isFunction(i.settings.afterSlideChange) && i.settings.afterSlideChange.apply(i, [o, l]); });
        } setTimeout(() => { i.resize(t); }, 100), k(t, 'current');
      },
    }, {
      key: 'slideAnimateOut',
      value() {
        if (!this.prevActiveSlide) return !1; const t = this.prevActiveSlide; E(t, this.effectsClasses), k(t, 'prev'); const e = this.settings.slideEffect; let
          i = e !== 'none' ? this.settings.cssEfects[e].out : e; this.stopSlideVideo(t), x.isFunction(this.settings.beforeSlideChange) && this.settings.beforeSlideChange.apply(this, [{ index: this.prevActiveSlideIndex, slide: this.prevActiveSlide }, { index: this.index, slide: this.activeSlide }]), this.prevActiveSlideIndex > this.index && this.settings.slideEffect == 'slide' && (i = this.settings.cssEfects.slide_back.out), C(t, i, () => {
          const e = t.querySelector('.gslide-media'); const
            i = t.querySelector('.gslide-description'); e.style.transform = '', E(e, 'greset'), e.style.opacity = '', i && (i.style.opacity = ''), E(t, 'prev');
        });
      },
    }, { key: 'stopSlideVideo', value(t) { x.isNumber(t) && (t = this.slidesContainer.querySelectorAll('.gslide')[t]); const e = t ? t.querySelector('.gvideo') : null; if (!e) return !1; const i = e.getAttribute('data-id'); if (m && x.has(m, i)) { const n = m[i]; n && n.play && n.pause(); } } }, { key: 'playSlideVideo', value(t) { x.isNumber(t) && (t = this.slidesContainer.querySelectorAll('.gslide')[t]); const e = t.querySelector('.gvideo'); if (!e) return !1; const i = e.getAttribute('data-id'); if (m && x.has(m, i)) { const n = m[i]; n && n.play && n.play(); } } }, { key: 'setElements', value(t) { this.settings.elements = t; } }, { key: 'getElements', value() { const t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null; if (this.elements = [], !x.isNil(this.settings.elements) && x.isArray(this.settings.elements)) return this.settings.elements; let e = !1; if (t !== null) { const i = t.getAttribute('data-gallery'); i && i !== '' && (e = document.querySelectorAll('[data-gallery="'.concat(i, '"]'))); } return e == 0 && (e = document.querySelectorAll('.'.concat(this.settings.selector))), e = Array.prototype.slice.call(e); } }, { key: 'getActiveSlide', value() { return this.slidesContainer.querySelectorAll('.gslide')[this.index]; } }, { key: 'getActiveSlideIndex', value() { return this.index; } }, { key: 'getAnimationClasses', value() { const t = []; for (const e in this.settings.cssEfects) if (this.settings.cssEfects.hasOwnProperty(e)) { const i = this.settings.cssEfects[e]; t.push('g'.concat(i.in)), t.push('g'.concat(i.out)); } return t.join(' '); } }, {
      key: 'build',
      value() {
        const t = this; if (this.built) return !1; const e = x.has(this.settings.svg, 'next') ? this.settings.svg.next : '';
        const i = x.has(this.settings.svg, 'prev') ? this.settings.svg.prev : '';
        const n = x.has(this.settings.svg, 'close') ? this.settings.svg.close : '';
        let s = this.settings.lightboxHtml; s = L(s = (s = (s = s.replace(/{nextSVG}/g, e)).replace(/{prevSVG}/g, i)).replace(/{closeSVG}/g, n)), document.body.appendChild(s); const o = document.getElementById('glightbox-body'); this.modal = o; const l = o.querySelector('.gclose'); this.prevButton = o.querySelector('.gprev'), this.nextButton = o.querySelector('.gnext'), this.overlay = o.querySelector('.goverlay'), this.loader = o.querySelector('.gloader'), this.slidesContainer = document.getElementById('glightbox-slider'), this.events = {}, k(this.modal, `glightbox-${this.settings.skin}`), this.settings.closeButton && l && (this.events.close = T('click', { onElement: l, withCallback(e, i) { e.preventDefault(), t.close(); } })), l && !this.settings.closeButton && l.parentNode.removeChild(l), this.nextButton && (this.events.next = T('click', { onElement: this.nextButton, withCallback(e, i) { e.preventDefault(), t.nextSlide(); } })), this.prevButton && (this.events.prev = T('click', { onElement: this.prevButton, withCallback(e, i) { e.preventDefault(), t.prevSlide(); } })), this.settings.closeOnOutsideClick && (this.events.outClose = T('click', { onElement: o, withCallback(e, i) { A(document.body, 'glightbox-mobile') || M(e.target, '.ginner-container') || M(e.target, '.gbtn') || A(e.target, 'gnext') || A(e.target, 'gprev') || t.close(); } })), w(this.elements, () => { const e = L(t.settings.slideHtml); t.slidesContainer.appendChild(e); }), d && k(document.body, 'glightbox-touch'), this.events.resize = T('resize', { onElement: window, withCallback() { t.resize(); } }), this.built = !0;
      },
    }, {
      key: 'resize',
      value() {
        let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null; if (t = t || this.activeSlide, document.body.style.width = '', document.body.style.width = ''.concat(document.body.offsetWidth, 'px'), t && !A(t, 'zoomed')) {
          const e = q(); const i = t.querySelector('.gvideo-wrapper'); const n = t.querySelector('.gslide-image'); const s = this.slideDescription; const o = e.width; let
            l = e.height; if (o <= 768 ? k(document.body, 'glightbox-mobile') : E(document.body, 'glightbox-mobile'), i || n) {
            let r = !1; if (s && (A(s, 'description-bottom') || A(s, 'description-top')) && !A(s, 'gabsolute') && (r = !0), n) {
              if (o <= 768) { const a = n.querySelector('img'); a.setAttribute('style', ''); } else if (r) {
                const c = s.offsetHeight; let
                  h = this.slidesData[this.index].width; h = h <= o ? `${h}px` : '100%'; const u = n.querySelector('img'); u.setAttribute('style', 'max-height: calc(100vh - '.concat(c, 'px)')), s.setAttribute('style', 'max-width: '.concat(u.offsetWidth, 'px;'));
              }
            } if (i) {
              const d = this.settings.plyr.ratio.split(':'); const g = this.slidesData[this.index].width; let
                p = g / (parseInt(d[0]) / parseInt(d[1])); if (p = Math.floor(p), r && (l -= s.offsetHeight), l < p && o > g) {
                const v = i.offsetWidth; const f = i.offsetHeight; const m = l / f; const
                  y = { width: v * m, height: f * m }; i.parentNode.setAttribute('style', 'max-width: '.concat(y.width, 'px')), r && s.setAttribute('style', 'max-width: '.concat(y.width, 'px;'));
              } else i.parentNode.style.maxWidth = ''.concat(g, 'px'), r && s.setAttribute('style', 'max-width: '.concat(g, 'px;'));
            }
          }
        }
      },
    }, { key: 'reload', value() { this.init(); } }, { key: 'close', value() { const t = this; if (this.closing) return !1; this.closing = !0, this.stopSlideVideo(this.activeSlide), k(this.modal, 'glightbox-closing'), C(this.overlay, this.settings.openEffect == 'none' ? 'none' : this.settings.cssEfects.fade.out), C(this.activeSlide, this.settings.closeEffect, () => { if (t.activeSlide = null, t.prevActiveSlideIndex = null, t.prevActiveSlide = null, t.built = !1, t.events) { for (const e in t.events) t.events.hasOwnProperty(e) && t.events[e].destroy(); t.events = null; } const i = document.body; E(g, 'glightbox-open'), E(i, 'glightbox-open touching gdesc-open glightbox-touch glightbox-mobile'), i.style.width = '', t.modal.parentNode.removeChild(t.modal), x.isFunction(t.settings.onClose) && t.settings.onClose(), t.closing = null; }); } }, { key: 'destroy', value() { this.close(), this.baseEvents.destroy(); } }]), t;
  }()); return function () {
    const t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}; const
      e = new R(t); return e.init(), e;
  };
}));
